name: update-datadog-service-catalog

on:
  workflow_call:
    inputs:
      matrix_path:
        required: true
        type: string

jobs:
  update_datadog_service_catalog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4.1.1

      - name: Update/create service data env variables
        uses: mikefarah/yq@master 
        with: 
          # Uses yq to read yaml file and parse specific values into env variables
            # Bigger cmd blocks are for keeping formatting of multi-line strings

          ## ADD AN IF STATEMENT TO LOOK FOR ---
          cmd: |
            #if there's multiple files in one file ("---"), split them into separate files
            STR="$(yq -s '"file_" + $index' ${{ inputs.matrix_path }})"
            cat STR

            echo "dd_service=$(yq '.dd-service' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV
            echo "dd_team=$(yq '.team' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV
            echo "dd_application=$(yq '.application' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV
            echo "dd_team=$(yq '.team' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV
            echo "dd_description=$(yq '.description' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV
            echo "dd_lifecycle=$(yq '.lifecycle' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV
            echo "dd_tier=$(yq '.tier' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV

            dd_contacts_string=$(yq '.contacts' "${{ inputs.matrix_path }}")
            echo "dd_contacts<<EOF" >> $GITHUB_ENV
            echo "$dd_contacts_string" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
            dd_links_string=$(yq '.links' "${{ inputs.matrix_path }}")
            echo "dd_links<<EOF" >> $GITHUB_ENV
            echo "$dd_links_string" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            dd_tags_string=$(yq '.tags' "${{ inputs.matrix_path }}")
            echo "dd_tags<<EOF" >> $GITHUB_ENV
            echo "$dd_tags_string" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            dd_integrations_string=$(yq '.integrations' "${{ inputs.matrix_path }}")
            echo "dd_integrations<<EOF" >> $GITHUB_ENV
            echo "$dd_integrations_string" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            # -- version 2.2 additions --
            echo "dd_type=$(yq '.type' "${{ inputs.matrix_path }}")" >> $GITHUB_ENV

            dd_languages_string=$(yq '.languages' "${{ inputs.matrix_path }}")
            echo "dd_languages<<EOF" >> $GITHUB_ENV
            echo "$dd_languages_string" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            dd_ci_pipeline_fingerprints_string=$(yq '.ci-pipeline-fingerprints' "${{ inputs.matrix_path }}")
            echo "dd_ci_pipeline_fingerprints<<EOF" >> $GITHUB_ENV
            echo "$dd_ci_pipeline_fingerprints_string" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

      # - name: Push service data into us5/datadog service catalog metadata
      #   uses: arcxp/datadog-service-catalog-metadata-provider@v2.3.0
      #   # If env.var is not found in the `Update/create service data env variables` step,
      #   # it will be defined here as empty or null automatically. Action will still work.
      #   with:
      #     schema-version: v2.2
      #     datadog-hostname: api.us5.datadoghq.com
      #     datadog-key: ${{ secrets.dd_api_key }}
      #     datadog-app-key: ${{ secrets.dd_app_key }}

      #     service-name: ${{ env.dd_service }}
      #     team: ${{ env.dd_team }}
      #     application: ${{ env.dd_application}}
      #     description: ${{ env.dd_description }}
      #     lifecycle: ${{ env.dd_lifecycle }}
      #     tier: ${{ env.dd_tier }}

      #     contacts: |
      #       ${{ env.dd_contacts }}

      #     links: |
      #       ${{ env.dd_links }}
          
      #     tags: |
      #       ${{ env.dd_tags }}

      #     integrations: |
      #       ${{ env.dd_integrations }}
          
      #     # version 2.2 additions 
      #     type: ${{ env.dd_type }}

      #     languages: |
      #       ${{ env.dd_languages }}
        
      #     ci-pipeline-fingerprints: |
      #       ${{ env.dd_ci_pipeline_fingerprints }}
          